<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using vcn with Trustcenter on Developer&#39;s Guide to SBOMs</title>
    <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/</link>
    <description>Recent content in Using vcn with Trustcenter on Developer&#39;s Guide to SBOMs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://nickanderegg.github.io/sbom-guide/vcn-usage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to VCN</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/intro/</guid>
      <description>Introduction to vcn # vcn is a command line tool that allows you to interact with Codenotary Trustcenter to notarize and authenticate your software assets. This documentation will guide you through the various ways you can use vcn to help manage the security of your software.
Specifying Assets in vcn Commands # Throughout this documentation, you&amp;rsquo;ll see the placeholder &amp;lt;artifact&amp;gt; used to refer to an asset that you want to authenticate or notarize.</description>
    </item>
    
    <item>
      <title>Notarizing Assets</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/notarizing-assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/notarizing-assets/</guid>
      <description>Notarizing Assets # When using vcn with Codenotary Trustcenter, the notarization process creates a cryptographic signature of the asset and stores it in a cryptographically-verifiable immutable database (immudb). That signature can then be used to authenticate the asset and verify its integrity.
Notarize an asset with vcn # The most basic way to notarize an asset is to pass the asset to the vcn notarize command:
vcn notarize &amp;lt;artifact&amp;gt; This command will sign the combination of the asset&amp;rsquo;s name, version, and hash to unique identify it.</description>
    </item>
    
    <item>
      <title>Authenticating Assets</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/authenticating-assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/authenticating-assets/</guid>
      <description>Authenticating Assets with Trustcenter # After an asset has been notarized with Codenotary Trustcenter, it can be authenticated to verify the integrity and signature of the asset before deployment to a production environment.
When an asset is authenticated, vcn will verify the integrity of the asset by comparing the hash of an asset with the signed hash stored by Trustcenter. If the hash of the asset matches the signed hash stored by Trustcenter and that asset is marked as Trusted, vcn will return a success message.</description>
    </item>
    
    <item>
      <title>Labeling Assets</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/labeling-assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/labeling-assets/</guid>
      <description>Managing Assets with Labels # Codenotary Trustcenter can associate labels with your notarized artifacts to provide an additional level of metadata for authentication. Labels can be used to indicate the intended use of an artifact, such as production, staging, or development. Labels can also be used to indicate the type of artifact, such as library, binary, or container.
Labels can be appended to, deleted from, or overwritten on an artifact when the vcn notarize command is run by passing the --labels-add, --labels-del, or --labels-set flags, as illustrated below.</description>
    </item>
    
    <item>
      <title>Authenticating SBOMs</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/bom-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/bom-authentication/</guid>
      <description>Notarizing and Authenticating Software Bills of Materials (SBOMs) with Trustcenter # When a Software Bill of Materials (SBOM) is notarized by vcn for a container image, codebase, or other build artifact, that asset&amp;rsquo;s entire manifest of dependencies is also notarized and they are immutably associated with one another.
This process creates a chain of custody for the asset and its dependencies, allowing you to check the integrity of the asset, track which artifacts are deployed on your infrastructure, and ensure untrusted dependencies never reach production.</description>
    </item>
    
    <item>
      <title>Working with Dependencies</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/managing-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/managing-dependencies/</guid>
      <description> Looking up known dependencies with vcn # To
vcn a --bom-what-includes (&amp;lt;scheme&amp;gt;://&amp;lt;name&amp;gt;@&amp;lt;version&amp;gt; | --hash &amp;lt;hash&amp;gt;) Container support with vcn # To
vcn &amp;lt;command&amp;gt; &amp;lt;scheme&amp;gt;://&amp;lt;image_or_container&amp;gt; [command options] Cascade operations with vcn # To
vcn notarize|untrust|unsupport [command options ...] --bom-cascade [--bom-force] </description>
    </item>
    
    <item>
      <title>Authenticating Dependencies</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/dependency-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/dependency-authentication/</guid>
      <description>Authenticating Trusted Dependencies # If we attempt to authenticate a Docker image which has not yet been notarized with our signing key, we receive a warning that the asset hasn&amp;rsquo;t yet been notarized:
❯ vcn authenticate --bom docker://python:3.9-alpine Warning: c9b90024bc4d49b1fa0ea4673b6eb1db1058cd1cba4b840d336bedf803a0afcf was not notarized When we then notarize the image, all of its dependencies are resolved, authenticated with Trustcenter, signed, and marked as Trusted:
❯ vcn notarize --bom image://python:3.9-alpine Your assets will not be uploaded.</description>
    </item>
    
    <item>
      <title>Working with Other Tools</title>
      <link>http://nickanderegg.github.io/sbom-guide/vcn-usage/bom-interoperability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://nickanderegg.github.io/sbom-guide/vcn-usage/bom-interoperability/</guid>
      <description>Exchanging Data with Other Tools # Import from spfx and cyclonedx # TODO.
Export to spfx or cyclonedx # TODO.</description>
    </item>
    
  </channel>
</rss>
