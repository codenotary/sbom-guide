[{"id":0,"href":"/sbom-guide/70_ecosystem/cyclonedx/cyclonedx_tools/","title":"Tools","section":"CycloneDX SBOM","content":" CycloneDX Tools # "},{"id":1,"href":"/sbom-guide/70_ecosystem/spdx/spdx_tools/","title":"Tools","section":"SPDX SBOM","content":" SPDX Tools # "},{"id":2,"href":"/sbom-guide/90_reference/glossary/","title":"Glossary","section":"Reference","content":" Glossary # Notarize Notarize (definition) # "},{"id":3,"href":"/sbom-guide/20_vcn_usage/110_vcn_intro/","title":"Introduction to VCN","section":"Using vcn with Trustcenter","content":" Specifying Assets in vcn Commands # Throughout this documentation, you\u0026rsquo;ll see the placeholder \u0026lt;artifact\u0026gt; used to refer to an asset that you want to authenticate or notarize. For example:\nvcn authenticate \u0026lt;artifact\u0026gt; The asset referred to by the \u0026lt;artifact\u0026gt; placeholder can be a file, directory, image, or git repository. The following are examples of how to specify an asset, where COMMAND is a placeholder for any vcn command that accepts an asset as an argument:\nvcn COMMAND \u0026lt;file\u0026gt; vcn COMMAND dir://\u0026lt;directory\u0026gt; vcn COMMAND image://\u0026lt;imageId\u0026gt; vcn COMMAND docker://\u0026lt;imageId\u0026gt; // deprecated, please use image vcn COMMAND podman://\u0026lt;imageId\u0026gt; vcn COMMAND git://\u0026lt;path_to_git_repo\u0026gt; vcn COMMAND --hash \u0026lt;hash\u0026gt; These docs will only use the \u0026lt;artifact\u0026gt; placeholder in examples, but the actual commands you run should specify the appropriate asset type based on one of the templates defined above.\nUsing the vcn CLI # To begin using the vcn CLI, you must first log in with your credentials for Codenotary Trustcenter. After you generate an API key in Trustcenter, you can log in with the vcn login command:\nvcn login --lc-host example.com If you are using vcn in a script, you can set the API key in the VCN_LC_API_KEY environment variable, and then run the vcn login command without the --lc-host flag:\nexport VCN_LC_API_KEY=\u0026lt;API_KEY\u0026gt; export VCN_LC_HOST=\u0026lt;TRUSTCENTER_DOMAIN\u0026gt; export VCN_LC_PORT=443 vcn login You can also specify the API key in an environment variable prefixed to the vcn login command.\nVCN_LC_API_KEY=\u0026lt;API_KEY\u0026gt; vcn login --lc-host \u0026lt;TRUSTCENTER_DOMAIN\u0026gt; However, by logging in without your API key present in the appropriate environment variable, the --signerID flag becomes mandatory.\n"},{"id":4,"href":"/sbom-guide/20_vcn_usage/115_vcn_cheatsheet/","title":"vcn Cheatsheet","section":"Using vcn with Trustcenter","content":" vcn Cheatsheet # "},{"id":5,"href":"/sbom-guide/20_vcn_usage/120_notarizing_assets/","title":"Notarizing Assets with Trustcenter","section":"Using vcn with Trustcenter","content":" Notarize an asset with vcn # To notarize an asset:\nvcn notarize \u0026lt;artifact\u0026gt; Passing the --bom flag to the vcn notarize command will notarize the asset\u0026rsquo;s dependencies and immutably associate them with the asset in Trustcenter:\nvcn notarize --bom \u0026lt;artifact\u0026gt; If you need to notarize assets in bulk, you can supply a CSV file that enumerates the hash, name, and labels of each asset to the vcn notarize command:\nvcn notarize --import-file \u0026lt;csv_file\u0026gt; The contents of your CSV file should follow the format\nhash,name,labels where hash is the hash of the asset, name is the name of the asset, and labels is an optional list of semicolon-separated labels. For example, your CSV file will look something like this:\naddf340d683e7dc9be1859f4e9a85f5143d4b21c,libcrypto1.1@1.1.1q-r0,label1;label2 722a653f03c02836b5f6391bc588e28aff86e44b,libssl1.1@1.1.1q-r0,label2 2962576b068d3e220d1df7730a0fc5ac49a201a5,ssl_client@1.35.0-r17,label2;label3 124baa9bfd023f2c0308a11b13086c3c2c3ecfd1,zlib@1.2.12-r3,label1;label3 Managing assets with labels # Codenotary Trustcenter can associate labels with your notarized artifacts to provide an additional level of metadata for authentication. Labels can be used to indicate the intended use of an artifact, such as production, staging, or development. Labels can also be used to indicate the type of artifact, such as library, binary, or container.\nLabels can be appended to, deleted from, or overwritten on an artifact when the vcn notarize command is run by passing the --labels-add, --labels-del, or --labels-set flags, as illustrated below.\nvcn Labeling Example # We can begin by notarizing an artifact with the --labels-add flag:\n❯ vcn n image://example --labels-add \u0026#39;label1,label2,label3\u0026#39; Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . SignerID: demo-signer Apikey revoked: no Status: TRUSTED Labels: label1 (added), label2 (added), label3 (added) The asset can then be notarized again with the --labels-del flag to remove one of the labels from our signature for the artifact:\n❯ vcn notarize image://example --labels-del \u0026#39;label3\u0026#39; Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . Status: TRUSTED Labels: label3 (removed) ❯ vcn inspect image://example --labels Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . Status: TRUSTED Labels: label1, label2 Then, after using the --labels-set flag to overwrite the existing labels on the artifact, we can use the --labels-add flag to append a final label to the artifact:\n❯ vcn notarize image://example --labels-set \u0026#39;label4,label5\u0026#39; Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . Status: TRUSTED Labels: label4, label5 ❯ vcn notarize image://example --labels-add \u0026#39;label6\u0026#39; Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . Status: TRUSTED Labels: label6 (added) ❯ vcn inspect image://example --labels Name: example Hash: f34ed96bfd9f329f89ce3977373cef37ce5d0a4ba8c5ed4aebca785d649b9082 . . . Status: TRUSTED Labels: label4, label5, label6 These labels provide an additional layer of metadata, and can be used to alter the results of the vcn authenticate command. For example, if we run the vcn authenticate command with the --label flag, the result will vary depending on the state of the asset\u0026rsquo;s labels:\nvcn inspect \u0026lt;artifact\u0026gt; --label \u0026#39;demo\u0026#39; If the artifact was marked Trusted, and the label demo is assigned, then the status is TRUSTED. the label demo is missing, then the status is UNKNOWN. If the artifact was marked Untrusted/Unsupported, and the label demo is assigned, then the status is UNTRUSTED/UNSUPPORTED (respectively). the label demo is missing, then the status is UNKNOWN. "},{"id":6,"href":"/sbom-guide/20_vcn_usage/130_authenticating_assets/","title":"Authenticating Assets with Trustcenter","section":"Using vcn with Trustcenter","content":" Authenticating Assets with Trustcenter # Using vcn to authenticate an asset # To authenticate an asset with Trustcenter, which verifies the integrity and signature of the asset, use the vcn authenticate command:\nvcn authenticate \u0026lt;asset\u0026gt; Authenticate with a specific signerID with vcn # Using signerID:\nvcn authenticate --signerID \u0026lt;signerID\u0026gt; \u0026lt;asset\u0026gt; Authenticate multiple assets with vcn # To\nls | xargs vcn authenticate "},{"id":7,"href":"/sbom-guide/20_vcn_usage/140_bom_authentication/","title":"Authenticating SBOMs with Trustcenter","section":"Using vcn with Trustcenter","content":" Add attachmentments to notarization transaction with vcn # To add attachments containing different types of supporting documentation to a notarization transaction:\nvcn n artifact --attach attachment1:label1 --attach attachment2:label1 --attach attachment3:label2 TODO.\nResolving dependencies with vcn # To\nvcn bom \u0026lt;asset\u0026gt; [bom options] [bom output options] Authenticating an asset\u0026rsquo;s BOM with vcn # To\nvcn a --bom \u0026lt;asset\u0026gt; [bom options] [bom output options] Notarizing an asset\u0026rsquo;s BOM with vcn # To\nvcn n --bom \u0026lt;asset\u0026gt; [bom options] [bom output options] Alternative output formats with vcn # To work with individual dependencies:\nvcn a|n|ut|us \u0026lt;scheme\u0026gt;://\u0026lt;name\u0026gt;@\u0026lt;version\u0026gt; | --hash \u0026lt;hash\u0026gt; # Alternative flags: # --bom-spdx # --bom-cdx-json # --bom-cdx-xml "},{"id":8,"href":"/sbom-guide/20_vcn_usage/150_dependencies/","title":"Working with Dependencies","section":"Using vcn with Trustcenter","content":" Looking up known dependencies with vcn # To\nvcn a --bom-what-includes (\u0026lt;scheme\u0026gt;://\u0026lt;name\u0026gt;@\u0026lt;version\u0026gt; | --hash \u0026lt;hash\u0026gt;) Container support with vcn # To\nvcn \u0026lt;command\u0026gt; \u0026lt;scheme\u0026gt;://\u0026lt;image_or_container\u0026gt; [command options] TODO:\nSupported schemes:\ndocker: Docker image ID or tag, requires running docker deamon container container: Docker container ID or tag, requires running docker deamon image image: container image in container registry. URL format: image://[\u0026lt;registry_server\u0026gt;/]image_tag. If \u0026lt;registry_server\u0026gt; is not specified, Docker Hub is used. By default vcn tries to connect to the registry using active Docker session, however users can always override it by using image-registry-user/image-registry-password CLI parameters. Cascade operations with vcn # To\nvcn notarize|untrust|unsupport [command options ...] --bom-cascade [--bom-force] "},{"id":9,"href":"/sbom-guide/20_vcn_usage/160_authenticating_dependencies/","title":"Authenticating Dependencies","section":"Using vcn with Trustcenter","content":" Authenticating Trusted Dependencies # If we attempt to authenticate a Docker image which has not yet been notarized with our signing key, we receive a warning that the asset hasn\u0026rsquo;t yet been notarized:\n❯ vcn authenticate --bom docker://python:3.9-alpine Warning: c9b90024bc4d49b1fa0ea4673b6eb1db1058cd1cba4b840d336bedf803a0afcf was not notarized When we then notarize the image, all of its dependencies are resolved, authenticated with Trustcenter, signed, and marked as Trusted:\n❯ vcn notarize --bom image://python:3.9-alpine Your assets will not be uploaded. They will be processed locally. Notarization in progress... artifact notarized Kind: image Name: python:3.9-alpine Hash: dca341b7a3fdbe1aa117f97f55321e60fe54a177d6f58ab3373ece796aca52ef Metadata: hashtype=\u0026#34;SHA256\u0026#34; image={ \u0026#34;Architecture\u0026#34;: \u0026#34;amd64\u0026#34;, \u0026#34;Created\u0026#34;: \u0026#34;2022-09-07 23:29:27.440739972 +0000 UTC\u0026#34;, \u0026#34;DockerVersion\u0026#34;: \u0026#34;20.10.12\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;0721d3b351f08b8a337ace23d9e1f99cc9cab25b3459b95359b85054c631a1af\u0026#34;, . . . } platform=\u0026#34;linux\u0026#34; architecture=\u0026#34;amd64\u0026#34; SignerID: demo-signer Apikey revoked: no Status: TRUSTED Dependencies: busybox@1.35.0-r17 899f82d8925d0659b628ab403a44a433bcd97a06 TRUSTED musl@1.2.3-r0 682bb42e6503a00152397e3db87be4602d566ac4 TRUSTED alpine-keys@2.4-r1 1417c88edb049afbaaa0d5e94a15c3726fe68f31 TRUSTED alpine-baselayout@3.2.0-r22 97afe73342be73255da8d7e0929d7f73a625ce4d TRUSTED . . . keyutils-libs@1.6.3-r1 19eb523e1d62d8b90431763aa3073d30e3283fb2 TRUSTED libuuid@2.38-r1 68bd5e9b8fe99566387e2ad7b7a44c8cf0936673 TRUSTED readline@8.1.2-r0 f676007339535e21de79acffbe7ae743a1f7168c TRUSTED .python-rundeps@20220907.232918 2d6f839e7b5f86c10811f4574f044b3b3ad53417 TRUSTED If we then attempt to authenticate the image we just notarized, we can confirm that it is now marked as Trusted:\nvcn authenticate --bom image://python:3.9-alpine Kind: image Name: python:3.9-alpine Hash: dca341b7a3fdbe1aa117f97f55321e60fe54a177d6f58ab3373ece796aca52ef Metadata: architecture=\u0026#34;amd64\u0026#34; hashtype=\u0026#34;SHA256\u0026#34; image={ \u0026#34;Architecture\u0026#34;: \u0026#34;amd64\u0026#34;, \u0026#34;Created\u0026#34;: \u0026#34;2022-09-07 23:29:27.440739972 +0000 UTC\u0026#34;, \u0026#34;DockerVersion\u0026#34;: \u0026#34;20.10.12\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;0721d3b351f08b8a337ace23d9e1f99cc9cab25b3459b95359b85054c631a1af\u0026#34;, . . . } platform=\u0026#34;linux\u0026#34; SignerID: demo-signer Apikey revoked: no Status: TRUSTED Dependencies: alpine-baselayout-data@3.2.0-r22 bf84212e37b7916942f03263f997c94e39494525 TRUSTED musl@1.2.3-r0 682bb42e6503a00152397e3db87be4602d566ac4 TRUSTED busybox@1.35.0-r17 899f82d8925d0659b628ab403a44a433bcd97a06 TRUSTED alpine-baselayout@3.2.0-r22 97afe73342be73255da8d7e0929d7f73a625ce4d TRUSTED . . . keyutils-libs@1.6.3-r1 19eb523e1d62d8b90431763aa3073d30e3283fb2 TRUSTED libuuid@2.38-r1 68bd5e9b8fe99566387e2ad7b7a44c8cf0936673 TRUSTED readline@8.1.2-r0 f676007339535e21de79acffbe7ae743a1f7168c TRUSTED .python-rundeps@20220907.232918 2d6f839e7b5f86c10811f4574f044b3b3ad53417 TRUSTED Let\u0026rsquo;s say there is a hypothetical vulnerability discovered in the package keyutils-libs@1.6.3-r1, and we want to ensure we don\u0026rsquo;t run any containers based on images containing this dependency.\nWe can take the untrusted dependency\u0026rsquo;s hash and mark it as untrusted:\n❯ vcn untrust --hash 19eb523e1d62d8b90431763aa3073d30e3283fb2 Your assets will not be uploaded. They will be processed locally. Notarization in progress... artifact notarized Name: keyutils-libs Hash: 19eb523e1d62d8b90431763aa3073d30e3283fb2 Metadata: hashtype=\u0026#34;SHA1\u0026#34; license=\u0026#34;GPL-2.0-or-later LGPL-2.0-or-later\u0026#34; version=\u0026#34;1.6.3-r1\u0026#34; SignerID: demo-signer Apikey revoked: no Status: UNTRUSTED Now, when we attempt to notarize any assets that contain our known-vulnerable dependency, we will see that the notarization fails:\n❯ vcn notarize --bom image://python:3.10-alpine Dependency keyutils-libs@1.6.3-r1 trust level is UNTRUSTED Error: some dependencies have insufficient trust level so artifact cannot be notarized. You can override it with --bom-force option Because the keyutils-libs@1.6.3-r1 dependency has already been marked as untrusted with our current signing key, any future attempts to notarize an asset containing that dependency will fail.\n"},{"id":10,"href":"/sbom-guide/20_vcn_usage/190_other_tools/","title":"Working with Other Tools","section":"Using vcn with Trustcenter","content":" Exchanging Data with Other Tools # Import from spfx and cyclonedx # TODO.\nExport to spfx or cyclonedx # TODO.\n"},{"id":11,"href":"/sbom-guide/30_trustcenter/310_intro/","title":"Intro to Trustcenter","section":"Codenotary Trustcenter","content":" SBOMs with Codenotary Trustcenter # Creating SBOMs using Trustcenter # TODO.\nSearching with Trustcenter # TODO.\n"},{"id":12,"href":"/sbom-guide/40_cas/410_intro/","title":"Intro to CAS","section":"Community Attestation Service","content":" About Codenotary\u0026rsquo;s Community Attestation Service # TODO.\nUsing CAS to Notarize and Authenticate # TODO: Intro.\ncas CLI Quickstart # # Get API key from: https://cas.codenotary.com # Get CAS: https://github.com/codenotary/cas/releases # Login export CAS_API_KEY=YOUR_API_KEY; cas login ## Create and sign a Software Bill of Materials cas notarize --bom docker://ubuntu ## Verify and authenticate assets with signing key cas authenticate --bom docker://ubuntu Summary of Functionality # TODO: Brief listing of all functionality.\nBasic Notarization and Authentication # # Notarize image cas notarize docker://container_image # Authenticate image cas authenticate docker://container -SignerID. # Inspect image cas inspect docker://container_image # Verify image cas authenticate docker://container_image \u0026amp;\u0026amp; docker run container_image Authenticating Trusted Dependencies # If we attempt to authenticate a Docker image which has not yet been notarized with out signing key, we receive a warning that the asset hasn\u0026rsquo;t yet been notarized, as well as a listing of the asset\u0026rsquo;s dependencies, their hashes, and their authentication status (Unknown, in this case).\n❯ cas authenticate --bom docker://python:3.9-alpine Resolving dependencies... Authenticating dependencies... 100% |██████████████████████████████████████████████████████| (36/36, 59 it/s) .python-rundeps@20220907.231849 b9bddeccfab9c3d7731f6b39360dcf3cfdeb1b7f Unknown alpine-baselayout@3.2.0-r22 3c6c70ccb77b490fd2663506ae7727a638eda4a6 Unknown alpine-baselayout-data@3.2.0-r22 d6554033bbe7f571edc82954fd97e59aa4c7f045 Unknown alpine-keys@2.4-r1 cffd2a49107574ba448f4b23b4bfc597676b9054 Unknown . . . Warning: c9b90024bc4d49b1fa0ea4673b6eb1db1058cd1cba4b840d336bedf803a0afcf was not notarized We can then notarize this image, which resolves all dependencies, authenticates them against CAS, and signs the Unknown dependencies, changing the status to Trusted.\n❯ cas notarize --bom docker://python:3.9-alpine Resolving dependencies... Authenticating dependencies... 100% |██████████████████████████████████████████████████████| (36/36, 58 it/s) Notarizing 36 dependencies ... 100% |██████████████████████████████████████████████████████| (36/36, 39 it/s) .python-rundeps@20220907.231849 b9bddeccfab9c3d7731f6b39360dcf3cfdeb1b7f Trusted alpine-baselayout@3.2.0-r22 3c6c70ccb77b490fd2663506ae7727a638eda4a6 Trusted alpine-baselayout-data@3.2.0-r22 d6554033bbe7f571edc82954fd97e59aa4c7f045 Trusted . . . Your assets will not be uploaded. They will be processed locally. Kind: docker Name: docker://python:3.9-alpine Hash: c9b90024bc4d49b1fa0ea4673b6eb1db1058cd1cba4b840d336bedf803a0afcf Metadata: architecture=\u0026#34;arm64\u0026#34; docker={ \u0026#34;Architecture\u0026#34;: \u0026#34;arm64\u0026#34;, \u0026#34;Created\u0026#34;: \u0026#34;2022-09-07T23:19:03.452996827Z\u0026#34;, \u0026#34;DockerVersion\u0026#34;: \u0026#34;20.10.12\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;sha256:c9b90024bc4d49b1fa0ea4673b6eb1db1058cd1cba4b840d336bedf803a0afcf\u0026#34;, . . . } platform=\u0026#34;linux\u0026#34; version=\u0026#34;3.9-alpine\u0026#34; SignerID: bmlja0Babcdefgh12345== Apikey revoked: no Status: TRUSTED Dependencies: .python-rundeps@20220907.231849 b9bddeccfab9c3d7731f6b39360dcf3cfdeb1b7f alpine-baselayout@3.2.0-r22 3c6c70ccb77b490fd2663506ae7727a638eda4a6 alpine-baselayout-data@3.2.0-r22 d6554033bbe7f571edc82954fd97e59aa4c7f045 alpine-keys@2.4-r1 cffd2a49107574ba448f4b23b4bfc597676b9054 apk-tools@2.12.9-r3 bd9d72a8be3f3e5f046759c4e82086b6b7195622 busybox@1.35.0-r17 31ea3e2c718f4a2dee63d808a2e1156fdcfc15ba . . . Now, if we attempt to authenticate the next version of the image (python:3.10-alpine instead of python:3.9-alpine, we are again warned that the asset has not been notarized. Unlike in the previous cas authenticate example, however, all but one of the resolved dependences is already marked as Trusted.\n❯ cas authenticate --bom docker://python:3.10-alpine Resolving dependencies... Authenticating dependencies... 100% |██████████████████████████████████████████████████████| (36/36, 17 it/s) .python-rundeps@20220907.223701 f3105e48f2a5caae5d0d2b6cbba5468a06a111c2 Unknown alpine-baselayout@3.2.0-r22 3c6c70ccb77b490fd2663506ae7727a638eda4a6 Trusted alpine-baselayout-data@3.2.0-r22 d6554033bbe7f571edc82954fd97e59aa4c7f045 Trusted alpine-keys@2.4-r1 cffd2a49107574ba448f4b23b4bfc597676b9054 Trusted apk-tools@2.12.9-r3 bd9d72a8be3f3e5f046759c4e82086b6b7195622 Trusted busybox@1.35.0-r17 31ea3e2c718f4a2dee63d808a2e1156fdcfc15ba Trusted . . . Warning: 85e5afa95f3f0b68ffc12ae1f57557dc2115bb822c9e9ff0278 was not notarized After cas authenticate resolves the container\u0026rsquo;s dependencies (using Alpine\u0026rsquo;s package manager to enumerate installed packages), it attempts to authenticate those dependencies using the current signing key. Because the underlying image containing the operating system is the same for both python:3.9-alpine and python:3.10-alpine, the only detected difference is the Python installation.\nAs you can see, not only does CAS help keep Untrusted software out of your production environment, but it can also reduce the burden of assessing dependency changes by indicating which have already been trusted.\nNotarizing container images # TODO.\nNotarizing source code # TODO.\nPython python examples here Go go example here Java Java example here Node Node example here .net .net example here PHP PHP example here Rust Rust example here Notarizing packages # TODO.\n"},{"id":13,"href":"/sbom-guide/70_ecosystem/cyclonedx/","title":"CycloneDX SBOM","section":"SBOM Ecosystem","content":" CycloneDX SBOM Format # "},{"id":14,"href":"/sbom-guide/90_reference/glossary/notarize/","title":"Notarize","section":"Glossary","content":" Notarize (definition) # "},{"id":15,"href":"/sbom-guide/80_examples/vulnerability_search/","title":"Searching for Vulnerabilities","section":"Examples \u0026 Use Cases","content":" Searching for Vulnerabilities with Trustcenter # "},{"id":16,"href":"/sbom-guide/70_ecosystem/spdx/","title":"SPDX SBOM","section":"SBOM Ecosystem","content":" SPDX SBOM Format # "}]